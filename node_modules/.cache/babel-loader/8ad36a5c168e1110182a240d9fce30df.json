{"ast":null,"code":"var _jsxFileName = \"/home/simplon/Documents/redux-car-configurator/src/redux/components/Color.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Carousel, Button, Icon } from 'react-materialize';\nimport { Link } from 'react-router-dom';\nimport { parseColorSelected } from \"../actions\";\nimport Menu from \"./Menu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Color = ({\n  state,\n  parseColorSelected\n}) => {\n  let mappedColor = state.jsonVersion.characteristic;\n\n  const getColor = currentSelect => {\n    console.log(state);\n    parseColorSelected(currentSelect);\n  };\n\n  const displayColor = () => mappedColor.map(color => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"custom-color-select\",\n          s: 6,\n          m: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: state.currentSelection.color ? color.color === state.currentSelection.color ? 'selected' : '' : \"\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: color.rims[0].pictures[0],\n              onClick: () => getColor(color),\n              alt: \"car color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: color.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"material-icons\",\n                children: \"attach_money\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 28\n              }, this), color.price]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, color, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  });\n\n  const mappedPics = () => state.currentSelection.view.map(pictures => {\n    return `${pictures}`;\n  }); // const mappedPicsJson = () => state.jsonVersion.pictures.map((pictures) => {\n  //     return (\n  //         `${pictures}`\n  //     )\n  // })\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"color\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu\",\n      children: /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"car-name\",\n      children: state.currentSelection.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), state.currentSelection.color === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"select-car-please\",\n        children: \" Please, select a car.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: displayColor()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), state.currentSelection.color !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-carousel\",\n      children: /*#__PURE__*/_jsxDEV(Carousel, {\n        className: \"carrousel-select\",\n        carouselId: \"Carousel-32\",\n        images: [mappedPics()],\n        options: {\n          fullWidth: true,\n          indicators: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this), state.currentSelection.color === null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"color-carousel\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: state.jsonVersion.characteristic[0].rims[0].pictures[0],\n        alt: \"car rims\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this), state.version === \"Pure\" && state.currentSelection.color !== null && /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/Jantes\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next-step\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          node: \"button\",\n          waves: \"light\",\n          className: \"blue-grey darken-4\",\n          children: [\"Etape suivante\", /*#__PURE__*/_jsxDEV(Icon, {\n            right: true,\n            children: \"arrow_forward\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, this), state.version === \"Legende\" && state.currentSelection.color !== null && /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/Sellerie\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next-step\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          node: \"button\",\n          waves: \"light\",\n          className: \"blue-grey darken-4\",\n          children: [\"Etape pr\\xE9c\\xE9dente\", /*#__PURE__*/_jsxDEV(Icon, {\n            right: true,\n            children: \"arrow_forward\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 8\n  }, this);\n};\n\n_c = Color;\n\nconst mapStateToProps = state => {\n  return {\n    state: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    parseColorSelected: data => dispatch(parseColorSelected(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Color);\n\nvar _c;\n\n$RefreshReg$(_c, \"Color\");","map":{"version":3,"sources":["/home/simplon/Documents/redux-car-configurator/src/redux/components/Color.js"],"names":["React","connect","Row","Col","Carousel","Button","Icon","Link","parseColorSelected","Menu","Color","state","mappedColor","jsonVersion","characteristic","getColor","currentSelect","console","log","displayColor","map","color","currentSelection","rims","pictures","name","price","mappedPics","view","fullWidth","indicators","version","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Carousel, Button, Icon } from 'react-materialize';\nimport { Link } from 'react-router-dom';\nimport { parseColorSelected } from \"../actions\";\nimport Menu from \"./Menu\";\n\nconst Color = ({state, parseColorSelected}) => {\n\n    let mappedColor = state.jsonVersion.characteristic\n\n    const getColor = (currentSelect) => {\nconsole.log(state)\n            parseColorSelected(currentSelect)\n    }\n\n    const displayColor = () => mappedColor.map((color) => {\n\n        return (\n            <div key={color}>\n                <div className=\"container\">\n                    <Col className=\"custom-color-select\" s={6} m={4} >\n                       <div className={state.currentSelection.color ? color.color === state.currentSelection.color ? 'selected' : '' : \"\"} >\n                        <img src={color.rims[0].pictures[0]} onClick={() => (getColor(color))} alt=\"car color\"/>\n                        <p >{color.name}</p>\n                        <p><i class=\"material-icons\">attach_money</i>{color.price}</p>\n                       </div>   \n                    </Col>\n                </div>\n            </div>\n        )\n    })\n\n    const mappedPics = () => state.currentSelection.view.map((pictures) => {\n        return (\n            `${pictures}`\n        )\n    })\n    // const mappedPicsJson = () => state.jsonVersion.pictures.map((pictures) => {\n    //     return (\n    //         `${pictures}`\n    //     )\n    // })\n\n    return(\n       <div className='color'>\n    <div className='menu'>\n        <Menu />\n        </div> \n        <h3 className=\"car-name\">{state.currentSelection.name}</h3>\n            {state.currentSelection.color === null &&\n                <div className=\"container\">\n                    <h1 className=\"select-car-please\"> Please, select a car.</h1>\n                </div>\n            }  \n            <Row>\n                {displayColor()}\n            </Row>\n           {state.currentSelection.color !== null && \n                <div className='color-carousel'>\n                <Carousel \n                    className=\"carrousel-select\"\n                    carouselId=\"Carousel-32\"\n                    images={[\n                    mappedPics()\n                    ]}\n                    options={{\n                        fullWidth: true,\n                        indicators: true,\n                    }}\n                    /> \n                 </div>\n           }   \n            {state.currentSelection.color === null && \n                <div className='color-carousel'>\n                    <img src={state.jsonVersion.characteristic[0].rims[0].pictures[0]} alt=\"car rims\"></img>\n                 </div>\n           }  \n          \n                {(state.version === \"Pure\") && (state.currentSelection.color !== null) &&\n                    <Link to=\"/Jantes\" >\n                        <div className=\"next-step\">\n                        <Button node=\"button\" waves=\"light\" className='blue-grey darken-4' >\n                            Etape suivante\n                            <Icon right>\n                            arrow_forward\n                            </Icon>\n                        </Button>\n                        </div>\n                    </Link>\n                }\n            {(state.version === \"Legende\") && (state.currentSelection.color !== null) &&\n                <Link to=\"/Sellerie\" >\n                    <div className=\"next-step\">\n                        <Button node=\"button\" waves=\"light\" className='blue-grey darken-4' >\n                            Etape précédente\n                            <Icon right>\n                            arrow_forward\n                            </Icon>\n                        </Button>\n                    </div>\n                </Link>\n            }\n        </div>\n    )}\n\nconst mapStateToProps = state =>{\n    return{\n        state: state,\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return{\n      \n        parseColorSelected: (data)=> dispatch(parseColorSelected(data)),\n        \n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Color)"]},"metadata":{},"sourceType":"module"}