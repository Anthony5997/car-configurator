{"ast":null,"code":"export const initialState = {\n  version: null,\n  photoPure: '/AlpineCars_app-images/sources-homepage/versions/ALPINE-PURE-1.png',\n  photoLegende: '/AlpineCars_app-images/sources-homepage/versions/ALPINE-LEGENDE-1.png',\n  jsonVersion: {},\n  jsonOption: {},\n  isFetching: false,\n  rimsJson: [],\n  sealingJson: [],\n  currentSelection: {\n    name: null,\n    color: null,\n    price: null,\n    mainPic: null,\n    view: [],\n    rims: {},\n    sealing: {}\n  }\n};\nexport const dataStore = (state = initialState, action) => {\n  console.log(\"action\", action);\n\n  switch (action.type) {\n    case \"GET_VERSION\":\n      {\n        return { ...state,\n          version: action.data,\n          sealingJson: action.data.jsonVersion.sealing.characteristic\n        };\n      }\n\n    case \"GET_RES_JSON\":\n      {\n        return { ...state,\n          jsonVersion: action.version,\n          jsonOption: action.option,\n          isFetching: false\n        };\n      }\n\n    case \"FETCHING_DATA\":\n      {\n        return { ...state,\n          isFetching: true\n        };\n      }\n\n    case \"CHOOSEN_COLOR\":\n      {\n        return { ...state,\n          currentSelection: { ...state.currentSelection,\n            name: action.data.name,\n            color: action.data.color,\n            price: action.data.price,\n            mainPic: action.data.rims[0].pictures[0],\n            view: action.data.rims[0].pictures\n          },\n          rimsJson: action.data.rims\n        };\n      }\n\n    case \"CHOOSEN_RIMS\":\n      {\n        let newState = { ...state,\n          currentSelection: { ...state.currentSelection,\n            rims: action.data,\n            view: action.data.pictures\n          }\n        };\n        console.log(newState);\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/simplon/Documents/redux-car-configurator/src/redux/reducers/index.js"],"names":["initialState","version","photoPure","photoLegende","jsonVersion","jsonOption","isFetching","rimsJson","sealingJson","currentSelection","name","color","price","mainPic","view","rims","sealing","dataStore","state","action","console","log","type","data","characteristic","option","pictures","newState"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,IADiB;AAE1BC,EAAAA,SAAS,EAAG,oEAFc;AAG1BC,EAAAA,YAAY,EAAG,uEAHW;AAI1BC,EAAAA,WAAW,EAAG,EAJY;AAK1BC,EAAAA,UAAU,EAAG,EALa;AAM1BC,EAAAA,UAAU,EAAG,KANa;AAO1BC,EAAAA,QAAQ,EAAG,EAPe;AAQ1BC,EAAAA,WAAW,EAAG,EARY;AAS1BC,EAAAA,gBAAgB,EAAG;AACjBC,IAAAA,IAAI,EAAG,IADU;AAEjBC,IAAAA,KAAK,EAAG,IAFS;AAGjBC,IAAAA,KAAK,EAAG,IAHS;AAIjBC,IAAAA,OAAO,EAAG,IAJO;AAKjBC,IAAAA,IAAI,EAAG,EALU;AAMjBC,IAAAA,IAAI,EAAG,EANU;AAOjBC,IAAAA,OAAO,EAAG;AAPO;AATO,CAArB;AAqBL,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGlB,YAAT,EAAuBmB,MAAvB,KAAkC;AACzDC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAuBF,MAAvB;;AACE,UAAQA,MAAM,CAACG,IAAf;AAEI,SAAK,aAAL;AAAmB;AACf,eAAM,EACJ,GAAGJ,KADC;AAEJjB,UAAAA,OAAO,EAAGkB,MAAM,CAACI,IAFb;AAGJf,UAAAA,WAAW,EAAGW,MAAM,CAACI,IAAP,CAAYnB,WAAZ,CAAwBY,OAAxB,CAAgCQ;AAH1C,SAAN;AAMH;;AACD,SAAK,cAAL;AAAoB;AAClB,eAAM,EACJ,GAAGN,KADC;AAEJd,UAAAA,WAAW,EAAGe,MAAM,CAAClB,OAFjB;AAGJI,UAAAA,UAAU,EAAGc,MAAM,CAACM,MAHhB;AAIJnB,UAAAA,UAAU,EAAE;AAJR,SAAN;AAMD;;AACD,SAAK,eAAL;AAAqB;AACnB,eAAM,EACJ,GAAGY,KADC;AAEJZ,UAAAA,UAAU,EAAC;AAFP,SAAN;AAIH;;AACD,SAAK,eAAL;AAAqB;AAEnB,eAAM,EACJ,GAAGY,KADC;AAEJT,UAAAA,gBAAgB,EAAG,EACjB,GAAGS,KAAK,CAACT,gBADQ;AAEjBC,YAAAA,IAAI,EAAGS,MAAM,CAACI,IAAP,CAAYb,IAFF;AAGjBC,YAAAA,KAAK,EAAGQ,MAAM,CAACI,IAAP,CAAYZ,KAHH;AAIjBC,YAAAA,KAAK,EAAGO,MAAM,CAACI,IAAP,CAAYX,KAJH;AAKjBC,YAAAA,OAAO,EAAGM,MAAM,CAACI,IAAP,CAAYR,IAAZ,CAAiB,CAAjB,EAAoBW,QAApB,CAA6B,CAA7B,CALO;AAMjBZ,YAAAA,IAAI,EAAGK,MAAM,CAACI,IAAP,CAAYR,IAAZ,CAAiB,CAAjB,EAAoBW;AANV,WAFf;AAUJnB,UAAAA,QAAQ,EAAGY,MAAM,CAACI,IAAP,CAAYR;AAVnB,SAAN;AAYH;;AACD,SAAK,cAAL;AAAoB;AAClB,YAAIY,QAAQ,GAAG,EACb,GAAGT,KADU;AAEbT,UAAAA,gBAAgB,EAAG,EACjB,GAAGS,KAAK,CAACT,gBADQ;AAEjBM,YAAAA,IAAI,EAAGI,MAAM,CAACI,IAFG;AAGjBT,YAAAA,IAAI,EAAEK,MAAM,CAACI,IAAP,CAAYG;AAHD;AAFN,SAAf;AAQAN,QAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ;AACA,eAAOA,QAAP;AACD;;AAGG;AACE,aAAOT,KAAP;AAtDN;AAwDL,CA1DQ","sourcesContent":["export const initialState = {\n  version: null,\n  photoPure : '/AlpineCars_app-images/sources-homepage/versions/ALPINE-PURE-1.png',\n  photoLegende : '/AlpineCars_app-images/sources-homepage/versions/ALPINE-LEGENDE-1.png',\n  jsonVersion : {},\n  jsonOption : {},\n  isFetching : false,\n  rimsJson : [],\n  sealingJson : [],\n  currentSelection : {\n    name : null,\n    color : null,\n    price : null,\n    mainPic : null,\n    view : [],\n    rims : {},\n    sealing : {}\n\n  }\n  };\n   \n  export const dataStore = (state = initialState, action) => {\n    console.log(\"action\" , action);\n      switch (action.type){\n       \n          case \"GET_VERSION\":{\n              return{\n                ...state, \n                version : action.data,\n                sealingJson : action.data.jsonVersion.sealing.characteristic\n\n              }\n          }\n          case \"GET_RES_JSON\":{\n            return{\n              ...state,\n              jsonVersion : action.version,\n              jsonOption : action.option,\n              isFetching: false\n            }\n          }\n          case \"FETCHING_DATA\":{\n            return{\n              ...state,\n              isFetching:true,\n            }\n        }\n        case \"CHOOSEN_COLOR\":{\n\n          return{\n            ...state,\n            currentSelection : {\n              ...state.currentSelection,\n              name : action.data.name,\n              color : action.data.color,\n              price : action.data.price,\n              mainPic : action.data.rims[0].pictures[0],\n              view : action.data.rims[0].pictures,\n            },\n            rimsJson : action.data.rims\n          }\n      }\n      case \"CHOOSEN_RIMS\":{\n        let newState = {\n          ...state,\n          currentSelection : {\n            ...state.currentSelection,\n            rims : action.data,\n            view: action.data.pictures\n          }\n        }\n        console.log(newState);\n        return newState\n      }\n\n          \n          default:\n            return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}