{"ast":null,"code":"var _jsxFileName = \"/home/simplon/Documents/redux-car-configurator/src/redux/components/Color.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Carousel } from 'react-materialize';\nimport { parseColorSelected } from \"../actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Color = ({\n  state,\n  parseColorSelected\n}) => {\n  let mappedColor = state.jsonVersion.characteristic;\n\n  const getColor = currentSelect => {\n    parseColorSelected(currentSelect);\n  };\n\n  const displayColor = () => mappedColor.map(color => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          className: \"teal white-text box\",\n          s: 6,\n          m: 4,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"custom-color-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: color.rims[0].pictures[0],\n              onClick: () => getColor(color)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 24\n            }, this), color.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)\n    }, color, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  });\n\n  const mappedPics = () => state.currentSelection.view.map(pictures => {\n    return {\n      pictures\n    };\n  });\n\n  const displayCarrousel = () => {\n    return /*#__PURE__*/_jsxDEV(Carousel, {\n      carouselId: \"Carousel-31\",\n      images: [displayCarrousel()],\n      options: {\n        dist: -100,\n        duration: 200,\n        fullWidth: false,\n        indicators: false,\n        noWrap: false,\n        numVisible: 5,\n        onCycleTo: null,\n        padding: 0,\n        shift: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  };\n\n  console.log(state);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [state.currentSelection.name, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: displayCarrousel()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: displayColor()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), \"colorrrrrr\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 8\n  }, this);\n};\n\n_c = Color;\n\nconst mapStateToProps = state => {\n  return {\n    state: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    parseColorSelected: data => dispatch(parseColorSelected(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Color);\n\nvar _c;\n\n$RefreshReg$(_c, \"Color\");","map":{"version":3,"sources":["/home/simplon/Documents/redux-car-configurator/src/redux/components/Color.js"],"names":["React","connect","Row","Col","Carousel","parseColorSelected","Color","state","mappedColor","jsonVersion","characteristic","getColor","currentSelect","displayColor","map","color","rims","pictures","name","mappedPics","currentSelection","view","displayCarrousel","dist","duration","fullWidth","indicators","noWrap","numVisible","onCycleTo","padding","shift","console","log","mapStateToProps","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Row, Col, Carousel } from 'react-materialize';\nimport { parseColorSelected } from \"../actions\";\n\n \n\nconst Color = ({state, parseColorSelected}) => {\n\n\n    \n    let mappedColor = state.jsonVersion.characteristic\n\n    const getColor = (currentSelect) => {\n\n            parseColorSelected(currentSelect)\n\n    }\n\n    \n    const displayColor = () => mappedColor.map((color) => {\n\n        return (\n            <div key={color}>\n                <div className=\"container\">\n\n                    <Col className=\"teal white-text box\" s={6} m={4} >\n                       <div className=\"custom-color-select\">\n\n                       <img src={color.rims[0].pictures[0]} onClick={() => (getColor(color))}/>\n                       {color.name}\n                       </div>\n                        \n                    </Col>\n                </div>\n\n            </div>\n        )\n\n\n    })\n\n    const mappedPics = () => state.currentSelection.view.map((pictures) => {\n\n        return (\n            {pictures}\n        )\n    })\n\n    const displayCarrousel = () => {\n\n        return (\n            <Carousel\n                carouselId=\"Carousel-31\"\n                images={[\n                   displayCarrousel()\n                ]}\n                options={{\n                    dist: -100,\n                    duration: 200,\n                    fullWidth: false,\n                    indicators: false,\n                    noWrap: false,\n                    numVisible: 5,\n                    onCycleTo: null,\n                    padding: 0,\n                    shift: 0\n                }}\n            /> \n    \n        )\n\n    }\n\n    console.log(state);\n\n    return(\n       \n       <div>\n           {state.currentSelection.name}\n           <div className=\"container\">\n               {displayCarrousel()}\n           \n           </div>\n\n            <Row>\n            {displayColor()}\n\n            </Row>\n         colorrrrrr\n        </div>\n    )}\n\nconst mapStateToProps = state =>{\n    return{\n        state: state,\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return{\n      \n        parseColorSelected: (data)=> dispatch(parseColorSelected(data)),\n        \n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Color)"]},"metadata":{},"sourceType":"module"}