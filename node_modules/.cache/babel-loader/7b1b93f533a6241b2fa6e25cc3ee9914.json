{"ast":null,"code":"export const getDataVersion = data => {\n  return {\n    type: 'GET_VERSION',\n    data\n  };\n};\nexport const getData = () => {\n  return {\n    type: 'FETCHING_DATA'\n  };\n};\nexport const getDataJson = (version, option) => {\n  return {\n    type: 'GET_RES_JSON',\n    version: version,\n    option: option\n  };\n};\nexport const getVersion = data => {\n  return dispatch => {\n    dispatch(getDataVersion(data));\n  };\n};\nexport const getResJson = version => {\n  return dispatch => {\n    dispatch(getData());\n    fetch('../../alpine.json').then(res => {\n      return res.json();\n    }).then(data => {\n      if (version === 'Pure') {\n        dispatch(getDataJson(data.version.pure, data.version.option));\n      } else if (version === 'Legende') {\n        dispatch(getDataJson(data.version.legende, data.version.option));\n      }\n    }).catch(error => console.log(error));\n  };\n};\nexport const parseColorSelected = data => {\n  return {\n    type: \"CHOOSEN_COLOR\",\n    data\n  };\n};\nexport const parseRimsSelected = data => {\n  return {\n    type: \"CHOOSEN_RIMS\",\n    data\n  };\n};\nexport const parseSealSelected = data => {\n  return {\n    type: \"CHOOSEN_SEAL\",\n    data\n  };\n};\nexport const getExhaust = data => {\n  console.log(\"exhauts\");\n  return {\n    type: 'GET_EXHAUST',\n    data\n  };\n};\nexport const deleteExhaust = () => {\n  return {\n    type: 'DELETE_EXHAUST'\n  };\n};\nexport const getParkAssist = data => {\n  return {\n    type: 'GET_PARKASSIST',\n    data\n  };\n};\nexport const deleteParkAssist = () => {\n  return {\n    type: 'DELETE_PARKASSIST'\n  };\n};\nexport const getMultimediaSupport = () => {\n  return {\n    type: 'GET_MULTIMEDIA_SUPPORT',\n    data\n  };\n};\nexport const deleteMultimediaSupport = () => {\n  return {\n    type: 'DELETE_MULTIMEDIA_SUPPORT'\n  };\n};","map":{"version":3,"sources":["/home/simplon/Documents/redux-car-configurator/src/redux/actions/index.js"],"names":["getDataVersion","data","type","getData","getDataJson","version","option","getVersion","dispatch","getResJson","fetch","then","res","json","pure","legende","catch","error","console","log","parseColorSelected","parseRimsSelected","parseSealSelected","getExhaust","deleteExhaust","getParkAssist","deleteParkAssist","getMultimediaSupport","deleteMultimediaSupport"],"mappings":"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","sourcesContent":["export const getDataVersion = (data) => {\n        return{\n           type : 'GET_VERSION',\n            data \n        }\n        \n    }\n\n    export const getData = () => {\n        return {\n            type : 'FETCHING_DATA'\n        }\n    }\n \n\nexport const getDataJson = (version, option) => {\n    return{\n       type : 'GET_RES_JSON',\n       version: version,\n       option : option \n    }\n    \n}\n\n\nexport const getVersion = (data) => {\n    return (dispatch) => {\n            dispatch(getDataVersion(data))\n        \n    }\n}\n\nexport const getResJson = (version) => {\n    \n    return (dispatch) => {\n        dispatch(getData())\n    fetch('../../alpine.json')\n    .then((res) => {\n        return res.json()})\n    .then(data => { \n        if (version === 'Pure'){\n            dispatch(getDataJson(data.version.pure, data.version.option))\n        }else if(version === 'Legende'){\n           dispatch(getDataJson(data.version.legende, data.version.option))\n        }\n    })\n    .catch(error => console.log(error))\n    }\n \n}\n\n\nexport const parseColorSelected = (data) => {\n\n    return {\n        type : \"CHOOSEN_COLOR\",\n        data\n    }\n}\n\nexport const parseRimsSelected = (data) => {\n    \n    return {\n        type : \"CHOOSEN_RIMS\",\n        data\n    }\n}\n\nexport const parseSealSelected = (data) => {\n    \n    return {\n        type : \"CHOOSEN_SEAL\",\n        data\n    }\n}\n\nexport const getExhaust = (data) => {\n    console.log(\"exhauts\")\n    return{\n       type : 'GET_EXHAUST',\n       data\n    }\n    \n}\n\nexport const deleteExhaust = () => {\n    return{\n       type : 'DELETE_EXHAUST',\n    }\n    \n}\nexport const getParkAssist = (data) => {\n    return{\n       type : 'GET_PARKASSIST',\n       data\n    }\n    \n}\nexport const deleteParkAssist = () => {\n    return{\n       type : 'DELETE_PARKASSIST',\n    }\n    \n}\n\nexport const getMultimediaSupport = () => {\n\n    return{\n        type : 'GET_MULTIMEDIA_SUPPORT',\n        data\n     }\n}\n\nexport const deleteMultimediaSupport = () => {\n    return{\n       type : 'DELETE_MULTIMEDIA_SUPPORT',\n    }\n    \n}\n"]},"metadata":{},"sourceType":"module"}